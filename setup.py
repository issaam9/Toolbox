#!/usr/bin/env python3
"""
Script d'installation et de configuration pour CyberSec Pro
Cr√©√© pour configurer l'environnement et installer les d√©pendances
"""

from datetime import datetime
import os
import sys
import subprocess
import json
import shutil
from pathlib import Path

class CyberSecSetup:
    """Installation et configuration de CyberSec Pro"""
    
    def __init__(self):
        self.base_dir = Path.cwd()
        self.required_dirs = [
            'toolbox',
            'toolbox/discovery',
            'toolbox/vulnerability', 
            'toolbox/enumeration',
            'toolbox/exploitation',
            'toolbox/post_exploitation',
            'toolbox/analyzer',
            'toolbox/reporting',
            'toolbox/plugins',
            'toolbox/plugins/scanners',
            'toolbox/plugins/analyzers',
            'toolbox/plugins/exploits',
            'toolbox/plugins/reports',
            'toolbox/plugins/utils',
            'config',
            'reports',
            'logs',
            'plugins',
            'data',
            'backup'
        ]
        
        self.python_deps = [
            'requests',
            'python-nmap',
            'paramiko',
            'cryptography',
            'beautifulsoup4',
            'lxml',
            'colorama',
            'tabulate',
            'matplotlib',
            'pandas',
            'scapy',
            'netaddr'
        ]
        
        self.system_deps = {
            'debian': ['nmap', 'masscan', 'nikto', 'dirb', 'gobuster', 'hydra', 'john'],
            'redhat': ['nmap', 'masscan', 'nikto', 'dirb', 'gobuster', 'hydra', 'john'],
            'arch': ['nmap', 'masscan', 'nikto', 'dirb', 'gobuster', 'hydra', 'john']
        }
    
    def run_setup(self):
        """Ex√©cuter l'installation compl√®te"""
        print("=" * 60)
        print("üîí CYBERSEC PRO - INSTALLATION")
        print("=" * 60)
        print()
        
        try:
            # V√©rifications pr√©liminaires
            self.check_requirements()
            
            # Cr√©ation de la structure
            self.create_directory_structure()
            
            # Installation des d√©pendances
            self.install_dependencies()
            
            # Configuration initiale
            self.initial_configuration()
            
            # Cr√©ation des fichiers manquants
            self.create_missing_modules()
            
            # Configuration des permissions
            self.setup_permissions()
            
            # Tests de base
            self.run_basic_tests()
            
            print("\n" + "=" * 60)
            print("‚úÖ INSTALLATION TERMIN√âE AVEC SUCC√àS!")
            print("=" * 60)
            print("\nPour d√©marrer CyberSec Pro:")
            print("python3 main.py")
            print("\nComptes par d√©faut:")
            print("üë§ admin/admin123 (Administrateur)")
            print("üë§ user/user123 (Utilisateur)")
            
        except Exception as e:
            print(f"\n‚ùå Erreur lors de l'installation: {e}")
            print("V√©rifiez les logs pour plus de d√©tails.")
            sys.exit(1)
    
    def check_requirements(self):
        """V√©rifier les pr√©requis syst√®me"""
        print("üîç V√©rification des pr√©requis...")
        
        # V√©rifier Python
        if sys.version_info < (3, 6):
            raise Exception("Python 3.6+ requis")
        
        # V√©rifier les permissions
        if not os.access('.', os.W_OK):
            raise Exception("Permissions d'√©criture requises dans le r√©pertoire courant")
        
        # V√©rifier pip
        try:
            import pip
        except ImportError:
            raise Exception("pip non trouv√©. Installez python3-pip")
        
        print("‚úÖ Pr√©requis valid√©s")
    
    def create_directory_structure(self):
        """Cr√©er la structure de r√©pertoires"""
        print("üìÅ Cr√©ation de la structure de r√©pertoires...")
        
        for directory in self.required_dirs:
            dir_path = self.base_dir / directory
            dir_path.mkdir(parents=True, exist_ok=True)
            
            # Cr√©er un fichier __init__.py pour les modules Python
            if 'toolbox' in directory:
                init_file = dir_path / '__init__.py'
                if not init_file.exists():
                    init_file.write_text('# CyberSec Pro Module\n')
        
        print("‚úÖ Structure de r√©pertoires cr√©√©e")
    
    def install_dependencies(self):
        """Installer les d√©pendances"""
        print("üì¶ Installation des d√©pendances Python...")
        
        for dep in self.python_deps:
            try:
                print(f"   Installing {dep}...")
                subprocess.run([sys.executable, '-m', 'pip', 'install', dep], 
                             check=True, capture_output=True)
            except subprocess.CalledProcessError as e:
                print(f"   ‚ö†Ô∏è  Erreur installation {dep}: {e}")
        
        print("‚úÖ D√©pendances Python install√©es")
        
        # Installation automatique des outils syst√®me sur Kali/Debian
        if os.path.exists('/etc/debian_version'):
            print("\nüîß Installation des outils de s√©curit√©...")
            
            tools_to_install = ['nmap', 'tcpdump', 'wireshark', 'tshark']
            
            try:
                # Mise √† jour des paquets
                subprocess.run(['sudo', 'apt', 'update'], check=True, capture_output=True, timeout=60)
                print("   ‚úÖ Mise √† jour des paquets")
                
                # Installation des outils essentiels
                for tool in tools_to_install:
                    try:
                        # V√©rifier si d√©j√† install√©
                        result = subprocess.run(['which', tool], capture_output=True)
                        if result.returncode == 0:
                            print(f"   ‚úÖ {tool} d√©j√† install√©")
                            continue
                        
                        # Installer l'outil
                        if tool == 'tshark':
                            # tshark est inclus avec wireshark
                            continue
                        
                        print(f"   üì¶ Installation de {tool}...")
                        subprocess.run(['sudo', 'apt', 'install', '-y', tool], 
                                     check=True, capture_output=True, timeout=120)
                        print(f"   ‚úÖ {tool} install√©")
                        
                    except subprocess.CalledProcessError:
                        print(f"   ‚ö†Ô∏è  √âchec installation {tool}")
                    except subprocess.TimeoutExpired:
                        print(f"   ‚ö†Ô∏è  Timeout installation {tool}")
                
                # Configuration sp√©ciale pour Wireshark
                self.configure_wireshark()
                
            except subprocess.CalledProcessError:
                print("   ‚ö†Ô∏è  Erreur lors de la mise √† jour des paquets")
            except subprocess.TimeoutExpired:
                print("   ‚ö†Ô∏è  Timeout lors de la mise √† jour")
        
        else:
            # Suggestions pour les autres OS
            print("\nüìã Outils syst√®me recommand√©s:")
            print("   Sur Debian/Ubuntu: sudo apt install nmap tcpdump wireshark")
            print("   Sur CentOS/RHEL:   sudo yum install nmap tcpdump wireshark")
            print("   Sur Arch Linux:    sudo pacman -S nmap tcpdump wireshark-qt")
    
    def configure_wireshark(self):
        """Configuration sp√©ciale pour Wireshark"""
        try:
            username = os.getenv('USER')
            if username and username != 'root':
                print("   üîß Configuration des permissions Wireshark...")
                
                # Ajouter l'utilisateur au groupe wireshark
                subprocess.run(['sudo', 'usermod', '-a', '-G', 'wireshark', username], 
                             capture_output=True, timeout=10)
                
                # Permissions sur dumpcap
                subprocess.run(['sudo', 'chmod', '+x', '/usr/bin/dumpcap'], 
                             capture_output=True, timeout=10)
                
                print("   ‚úÖ Permissions Wireshark configur√©es")
                print("   ‚ö†Ô∏è  Red√©marrez votre session pour appliquer les changements")
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Erreur configuration Wireshark: {e}")
            print("   üí° Configurez manuellement avec:")
            print(f"      sudo usermod -a -G wireshark {username}")
            print("      sudo chmod +x /usr/bin/dumpcap")
    
    def initial_configuration(self):
        """Configuration initiale"""
        print("‚öôÔ∏è  Configuration initiale...")
        
        # Fichier de configuration principal
        config = {
            "version": "1.0.0",
            "installation_date": str(Path.cwd()),
            "default_timeout": 30,
            "max_threads": 10,
            "log_level": "INFO",
            "interfaces": {
                "modern": True,
                "classic": True,
                "cli": True,
                "admin": True
            },
            "security": {
                "encryption_enabled": True,
                "session_timeout": 3600,
                "max_login_attempts": 3
            },
            "tools": {
                "nmap_path": "/usr/bin/nmap",
                "masscan_path": "/usr/bin/masscan",
                "nikto_path": "/usr/bin/nikto",
                "dirb_path": "/usr/bin/dirb"
            }
        }
        
        config_file = self.base_dir / 'config' / 'cybersec_config.json'
        with open(config_file, 'w') as f:
            json.dump(config, f, indent=2)
        
        # Configuration des logs
        log_config = {
            "version": 1,
            "disable_existing_loggers": False,
            "formatters": {
                "standard": {
                    "format": "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
                }
            },
            "handlers": {
                "file": {
                    "level": "INFO",
                    "formatter": "standard",
                    "class": "logging.FileHandler",
                    "filename": "logs/cybersec.log",
                    "mode": "a"
                }
            },
            "loggers": {
                "": {
                    "handlers": ["file"],
                    "level": "INFO",
                    "propagate": False
                }
            }
        }
        
        log_config_file = self.base_dir / 'config' / 'logging.json'
        with open(log_config_file, 'w') as f:
            json.dump(log_config, f, indent=2)
        
        print("‚úÖ Configuration initiale cr√©√©e")
    
    def create_missing_modules(self):
        """Cr√©er les modules manquants avec des impl√©mentations de base"""
        print("üîß Cr√©ation des modules manquants...")
        
        # Module nmap_scanner de base
        nmap_module = self.base_dir / 'toolbox' / 'discovery' / 'nmap_scanner.py'
        if not nmap_module.exists():
            nmap_code = '''#!/usr/bin/env python3
"""
Module Nmap Scanner pour CyberSec Pro
"""

import subprocess
import json
from datetime import datetime

def run_nmap_scan(target, scan_type="basic"):
    """Ex√©cuter un scan nmap"""
    try:
        if scan_type == "basic":
            cmd = ["nmap", "-sV", "-O", "--script=vuln", target]
        elif scan_type == "intense":
            cmd = ["nmap", "-A", "-T4", "-script=vuln", target]
        else:
            cmd = ["nmap", "-sS", target]
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
        
        if result.returncode == 0:
            return format_nmap_results(result.stdout, target)
        else:
            return f"Erreur nmap: {result.stderr}"
    
    except subprocess.TimeoutExpired:
        return f"Timeout lors du scan de {target}"
    except FileNotFoundError:
        return f"nmap non trouv√©. Installez nmap: sudo apt install nmap"
    except Exception as e:
        return f"Erreur lors du scan: {str(e)}"

def format_nmap_results(raw_output, target):
    """Formater les r√©sultats nmap"""
    formatted = []
    formatted.append("=" * 50)
    formatted.append("NMAP SCAN RESULTS")
    formatted.append("=" * 50)
    formatted.append(f"Target: {target}")
    formatted.append(f"Scan Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    formatted.append("")
    formatted.append(raw_output)
    
    return "\\n".join(formatted)

if __name__ == "__main__":
    target = input("Entrez l'IP cible: ")
    result = run_nmap_scan(target)
    print(result)
'''
            with open(nmap_module, 'w') as f:
                f.write(nmap_code)
        
        # Module OpenVAS Scanner de base
        openvas_module = self.base_dir / 'toolbox' / 'vulnerability' / 'openvas_scanner.py'
        if not openvas_module.exists():
            openvas_code = '''#!/usr/bin/env python3
"""
Module OpenVAS Scanner pour CyberSec Pro
"""

from datetime import datetime
import subprocess

def run_enum(target):
    """Scanner les vuln√©rabilit√©s avec OpenVAS"""
    try:
        # V√©rifier si OpenVAS est disponible
        result = subprocess.run(["which", "gvm-cli"], capture_output=True)
        
        if result.returncode != 0:
            return simulate_openvas_scan(target)
        
        # Commande OpenVAS r√©elle (n√©cessite configuration)
        # cmd = ["gvm-cli", "socket", "--xml", f"<start_task task_id='{task_id}'/>"]
        # Pour maintenant, simulation
        return simulate_openvas_scan(target)
        
    except Exception as e:
        return f"Erreur OpenVAS: {str(e)}"

def simulate_openvas_scan(target):
    """Simuler un scan OpenVAS"""
    return f"""
=== OPENVAS VULNERABILITY SCAN ===
Target: {target}
Scan Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

VULNERABILITIES FOUND:
1. SSH-2.0-OpenSSH_7.4 (Medium Risk)
   - CVE: CVE-2018-15473
   - Description: User enumeration vulnerability
   
2. Apache/2.4.29 (Low Risk)
   - CVE: CVE-2019-0220
   - Description: URL normalization inconsistency

RECOMMENDATIONS:
- Update OpenSSH to latest version
- Apply Apache security patches
- Review system configurations

NOTE: This is a simulated scan. 
Install and configure OpenVAS for real scanning.
"""

if __name__ == "__main__":
    target = input("Entrez l'IP cible: ")
    result = run_enum(target)
    print(result)
'''
            with open(openvas_module, 'w') as f:
                f.write(openvas_code)
        
        # Module Wireshark Analyzer am√©lior√©
        wireshark_module = self.base_dir / 'toolbox' / 'analyzer' / 'wireshark_analyzer.py'
        if not wireshark_module.exists():
            wireshark_code = '''#!/usr/bin/env python3
"""
Module Wireshark Analyzer pour CyberSec Pro (Version Am√©lior√©e)
"""

import subprocess
import time
import os
import sys
import shutil
from datetime import datetime
import logging

def setup_logging():
    logging.basicConfig(level=logging.INFO)
    return logging.getLogger(__name__)

logger = setup_logging()

def check_tool_availability():
    """V√©rifier la disponibilit√© des outils de capture r√©seau"""
    tools = {
        'tshark': shutil.which('tshark'),
        'tcpdump': shutil.which('tcpdump'),
        'wireshark': shutil.which('wireshark')
    }
    return {k: v for k, v in tools.items() if v is not None}

def get_installation_instructions():
    """Instructions d'installation selon l'OS"""
    if os.path.exists('/etc/kali_version') or 'kali' in os.uname().release.lower():
        return {
            'commands': [
                'sudo apt update',
                'sudo apt install -y wireshark tshark',
                'sudo usermod -a -G wireshark $USER'
            ],
            'note': 'Sur Kali Linux, red√©marrez votre session apr√®s installation.'
        }
    elif os.path.exists('/etc/debian_version'):
        return {
            'commands': [
                'sudo apt update',
                'sudo apt install -y wireshark-qt tshark',
                'sudo usermod -a -G wireshark $USER'
            ],
            'note': 'Red√©marrez votre session pour appliquer les permissions.'
        }
    else:
        return {
            'commands': ['Visitez https://www.wireshark.org/download.html'],
            'note': 'Installation manuelle requise pour votre OS.'
        }

def analyze_traffic(interface=None, target_ip=None, duration=30):
    """Analyser le trafic r√©seau"""
    available_tools = check_tool_availability()
    
    if not available_tools:
        return generate_installation_report()
    
    # Utiliser tshark si disponible, sinon tcpdump
    if 'tshark' in available_tools:
        return analyze_with_tshark(interface, target_ip, duration)
    elif 'tcpdump' in available_tools:
        return analyze_with_tcpdump(interface, target_ip, duration)
    else:
        return generate_installation_report()

def analyze_with_tshark(interface, target_ip, duration):
    """Analyser avec tshark"""
    if interface is None:
        interface = 'any'
    
    try:
        cmd = ['tshark', '-i', interface, '-c', '50', '-a', f'duration:{duration}']
        if target_ip:
            cmd.extend(['-f', f'host {target_ip}'])
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=duration + 10)
        
        if result.returncode == 0:
            return format_results(result.stdout, "tshark", interface, target_ip, duration)
        else:
            if 'permission denied' in result.stderr.lower():
                return generate_permission_error()
            else:
                return f"Erreur tshark: {result.stderr}"
    
    except subprocess.TimeoutExpired:
        return f"Timeout lors de l'analyse sur {interface}"
    except Exception as e:
        return f"Erreur: {str(e)}"

def analyze_with_tcpdump(interface, target_ip, duration):
    """Analyser avec tcpdump"""
    if interface is None:
        interface = 'any'
    
    try:
        cmd = ['sudo', 'tcpdump', '-i', interface, '-c', '50']
        if target_ip:
            cmd.extend(['host', target_ip])
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=duration + 5)
        
        if result.returncode == 0:
            return format_results(result.stdout, "tcpdump", interface, target_ip, duration)
        else:
            return f"Erreur tcpdump: {result.stderr}"
    
    except Exception as e:
        return f"Erreur tcpdump: {str(e)}"

def format_results(raw_output, tool, interface, target_ip, duration):
    """Formater les r√©sultats"""
    lines = raw_output.strip().split('\\n')
    packet_count = len([line for line in lines if line.strip() and not line.startswith('Capturing')])
    
    return f"""
=== ANALYSE TRAFIC R√âSEAU ({tool.upper()}) ===
Interface: {interface}
Cible: {target_ip or 'Toutes'}
Dur√©e: {duration} secondes
Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üìä STATISTIQUES:
‚îú‚îÄ Paquets captur√©s: {packet_count}
‚îú‚îÄ Outil utilis√©: {tool}
‚îî‚îÄ Interface: {interface}

üîç √âCHANTILLON DE DONN√âES:
{raw_output[:400]}{'...' if len(raw_output) > 400 else ''}

üí° ANALYSE:
{'‚îú‚îÄ Trafic d√©tect√© normalement' if packet_count > 0 else '‚îú‚îÄ Aucun trafic d√©tect√©'}
{'‚îú‚îÄ Surveillance active' if packet_count > 10 else '‚îú‚îÄ Trafic faible'}
‚îî‚îÄ Analyse termin√©e avec succ√®s
"""

def generate_installation_report():
    """Rapport d'installation"""
    instructions = get_installation_instructions()
    
    return f"""
=== INSTALLATION WIRESHARK REQUISE ===
Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

‚ùå PROBL√àME:
Aucun outil de capture r√©seau d√©tect√© (tshark, tcpdump, wireshark).

üîß INSTALLATION:
{chr(10).join(f'    {cmd}' for cmd in instructions['commands'])}

üí° NOTE:
{instructions['note']}

üåê T√âL√âCHARGEMENT:
https://www.wireshark.org/download.html

‚ö†Ô∏è  APR√àS INSTALLATION:
Red√©marrez votre session pour appliquer les permissions.

üß™ TEST:
V√©rifiez avec: tshark --version
"""

def generate_permission_error():
    """Erreur de permissions"""
    username = os.getenv('USER', 'user')
    
    return f"""
=== ERREUR DE PERMISSIONS ===
Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

‚ùå PROBL√àME:
Permissions insuffisantes pour la capture r√©seau.

üîß SOLUTION:
    sudo usermod -a -G wireshark {username}
    sudo chmod +x /usr/bin/dumpcap

Puis red√©marrez votre session.

üîÑ ALTERNATIVE:
Utilisez sudo: sudo tshark -i any -c 10
"""

def stop_capture():
    """Arr√™ter la capture"""
    try:
        subprocess.run(['pkill', 'tshark'], check=False, capture_output=True)
        subprocess.run(['sudo', 'pkill', 'tcpdump'], check=False, capture_output=True)
    except:
        pass

if __name__ == "__main__":
    target = input("IP cible (optionnel): ").strip()
    duration = int(input("Dur√©e (secondes, d√©faut 10): ") or "10")
    result = analyze_traffic(target_ip=target or None, duration=duration)
    print(result)
'''
            with open(wireshark_module, 'w') as f:
                f.write(wireshark_code)
        
        # Module Report Generator
        report_module = self.base_dir / 'toolbox' / 'reporting' / 'report_generator.py'
        if not report_module.exists():
            report_code = '''#!/usr/bin/env python3
"""
Module Report Generator pour CyberSec Pro
"""

import os
import json
from datetime import datetime
from pathlib import Path

REPORTS_DIR = Path("reports")
REPORTS_DIR.mkdir(exist_ok=True)

def log_to_module_report(module, content):
    """Enregistrer dans un rapport de module"""
    try:
        report_file = REPORTS_DIR / f"{module}_report.txt"
        
        with open(report_file, 'a', encoding='utf-8') as f:
            f.write(f"\\n{'='*50}\\n")
            f.write(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\\n")
            f.write(f"Module: {module.upper()}\\n")
            f.write(f"{'='*50}\\n")
            f.write(content)
            f.write("\\n\\n")
        
        return True
    except Exception as e:
        print(f"Erreur lors de l'√©criture du rapport: {e}")
        return False

def read_module_report(module):
    """Lire un rapport de module"""
    try:
        report_file = REPORTS_DIR / f"{module}_report.txt"
        
        if not report_file.exists():
            return f"Aucun rapport trouv√© pour le module '{module}'"
        
        with open(report_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        return content if content.strip() else f"Le rapport du module '{module}' est vide"
        
    except Exception as e:
        return f"Erreur lors de la lecture du rapport: {e}"

def export_module_report(module, format='txt'):
    """Exporter un rapport de module"""
    try:
        content = read_module_report(module)
        
        if format == 'json':
            export_file = REPORTS_DIR / f"{module}_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            data = {
                'module': module,
                'export_date': datetime.now().isoformat(),
                'content': content
            }
            with open(export_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
        else:
            export_file = REPORTS_DIR / f"{module}_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            with open(export_file, 'w', encoding='utf-8') as f:
                f.write(content)
        
        return str(export_file)
        
    except Exception as e:
        return f"Erreur lors de l'export: {e}"

def delete_module_report(module):
    """Supprimer un rapport de module"""
    try:
        report_file = REPORTS_DIR / f"{module}_report.txt"
        
        if report_file.exists():
            report_file.unlink()
            return True
        return False
        
    except Exception as e:
        print(f"Erreur lors de la suppression: {e}")
        return False

def list_existing_reports():
    """Lister les rapports existants"""
    try:
        reports = []
        for file in REPORTS_DIR.glob("*_report.txt"):
            module_name = file.stem.replace('_report', '')
            file_size = file.stat().st_size
            modified = datetime.fromtimestamp(file.stat().st_mtime)
            
            reports.append({
                'module': module_name,
                'file': str(file),
                'size': file_size,
                'modified': modified.strftime('%Y-%m-%d %H:%M:%S')
            })
        
        return reports
        
    except Exception as e:
        print(f"Erreur lors du listage: {e}")
        return []

if __name__ == "__main__":
    # Test du module
    test_content = "Test du syst√®me de rapport"
    log_to_module_report("test", test_content)
    
    print("Contenu du rapport test:")
    print(read_module_report("test"))
    
    print("\\nRapports existants:")
    for report in list_existing_reports():
        print(f"- {report['module']}: {report['size']} bytes, modifi√© {report['modified']}")
'''
            with open(report_module, 'w') as f:
                f.write(report_code)
        
        print("‚úÖ Modules manquants cr√©√©s")
    
    def setup_permissions(self):
        """Configurer les permissions"""
        print("üîê Configuration des permissions...")
        
        try:
            # Rendre les scripts ex√©cutables
            scripts = [
                'main.py',
                'setup.py',
                'toolbox/discovery/nmap_scanner.py',
                'toolbox/vulnerability/openvas_scanner.py',
                'toolbox/analyzer/wireshark_analyzer.py'
            ]
            
            for script in scripts:
                script_path = self.base_dir / script
                if script_path.exists():
                    os.chmod(script_path, 0o755)
            
            # Permissions sur les r√©pertoires
            for directory in ['logs', 'reports', 'config', 'backup']:
                dir_path = self.base_dir / directory
                if dir_path.exists():
                    os.chmod(dir_path, 0o755)
            
            print("‚úÖ Permissions configur√©es")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur permissions: {e}")
    
    def run_basic_tests(self):
        """Ex√©cuter des tests de base"""
        print("üß™ Ex√©cution des tests de base...")
        
        try:
            # Test d'import des modules
            sys.path.insert(0, str(self.base_dir))
            
            # Test du module de rapports
            from toolbox.reporting.report_generator import log_to_module_report, read_module_report
            
            test_content = f"Test d'installation - {datetime.now()}"
            log_to_module_report("installation", test_content)
            
            result = read_module_report("installation")
            if test_content in result:
                print("‚úÖ Test syst√®me de rapports: OK")
            else:
                print("‚ö†Ô∏è  Test syst√®me de rapports: √âCHEC")
            
            # Test de la structure
            required_files = [
                'config/cybersec_config.json',
                'config/users.json',
                'toolbox/discovery/nmap_scanner.py',
                'toolbox/vulnerability/openvas_scanner.py'
            ]
            
            all_files_exist = True
            for file_path in required_files:
                if not (self.base_dir / file_path).exists():
                    print(f"‚ö†Ô∏è  Fichier manquant: {file_path}")
                    all_files_exist = False
            
            if all_files_exist:
                print("‚úÖ Test structure de fichiers: OK")
            else:
                print("‚ö†Ô∏è  Test structure de fichiers: √âCHEC")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur lors des tests: {e}")

def main():
    """Fonction principale"""
    if len(sys.argv) > 1 and sys.argv[1] == '--help':
        print("""
CyberSec Pro - Script d'installation

Usage:
    python3 setup.py          # Installation compl√®te
    python3 setup.py --help   # Afficher cette aide

Ce script va:
1. Cr√©er la structure de r√©pertoires
2. Installer les d√©pendances Python
3. Cr√©er les fichiers de configuration
4. Cr√©er les modules manquants
5. Configurer les permissions
6. Ex√©cuter des tests de base

Pr√©requis:
- Python 3.6+
- pip
- Permissions d'√©criture dans le r√©pertoire courant

Outils recommand√©s (√† installer manuellement):
- nmap
- masscan  
- nikto
- dirb
- gobuster
- hydra
- john
- tcpdump/wireshark
        """)
        return
    
    setup = CyberSecSetup()
    setup.run_setup()

if __name__ == "__main__":
    main()